package com.study.kotlin.controllerimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapperimport com.study.kotlin.dto.PostRequestDtoimport com.study.kotlin.dto.PostResponseDtoimport io.kotest.assertions.withClueimport io.kotest.core.extensions.Extensionimport io.kotest.core.spec.style.StringSpecimport io.kotest.extensions.spring.SpringExtensionimport io.kotest.matchers.shouldBeimport org.springframework.beans.factory.annotation.Autowiredimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvcimport org.springframework.boot.test.context.SpringBootTestimport org.springframework.http.HttpStatusimport org.springframework.http.MediaTypeimport org.springframework.restdocs.ManualRestDocumentationimport org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentimport org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfigurationimport org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrintimport org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPathimport org.springframework.restdocs.payload.PayloadDocumentation.requestFieldsimport org.springframework.restdocs.payload.PayloadDocumentation.responseFieldsimport org.springframework.test.web.servlet.MockMvcimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders.postimport org.springframework.test.web.servlet.setup.DefaultMockMvcBuilderimport org.springframework.test.web.servlet.setup.MockMvcBuildersimport org.springframework.web.context.WebApplicationContextimport org.springframework.web.filter.CharacterEncodingFilter@AutoConfigureMockMvc@SpringBootTest@Suppress("BlockingMethodInNonBlockingContext")class PostControllerTest @Autowired constructor(    ctx: WebApplicationContext,) : StringSpec({    val restDocumentation = ManualRestDocumentation()    val restDocumentationConfigurer = documentationConfiguration(restDocumentation)        .operationPreprocessors()        .withRequestDefaults(prettyPrint())        .withResponseDefaults(prettyPrint())    val mockMvc: MockMvc = MockMvcBuilders        .webAppContextSetup(ctx)        .apply<DefaultMockMvcBuilder>(restDocumentationConfigurer)        .addFilters<DefaultMockMvcBuilder>(CharacterEncodingFilter("UTF-8", true))        .build()    beforeTest {        restDocumentation.beforeTest(javaClass, "PostControllerTest")    }    afterTest {        restDocumentation.afterTest()    }    "글을 작성하면 성공한다" {        val postRequestDto = PostRequestDto("제목", "내용")        val mvcResult = mockMvc.perform(            post("$API_END_POINT/posts")                .contentType(MediaType.APPLICATION_JSON)                .accept(MediaType.APPLICATION_JSON)                .content(objectMapper.writeValueAsBytes(postRequestDto))        ).andReturn()        val result = objectMapper.readValue(mvcResult.response.contentAsString, PostResponseDto::class.java)        withClue("status는 ${HttpStatus.CREATED.value()}이어야되고 title은 ${postRequestDto.title}, body는 ${postRequestDto.body}여야 한다}") {            mvcResult.response.status shouldBe HttpStatus.CREATED.value()            result.title shouldBe postRequestDto.title            result.body shouldBe postRequestDto.body        }        document(            "create",            requestFields(                fieldWithPath("title").description("게시글 제목"),                fieldWithPath("body").description("게시글 내용"),            ),            responseFields(                fieldWithPath("id").description("게시물 번호"),                fieldWithPath("title").description("게시글 제목"),                fieldWithPath("body").description("게시글 내용"),            )        ).handle(mvcResult)    }}) {    override fun extensions(): List<Extension> = listOf(SpringExtension)    companion object {        const val API_END_POINT = "/api/v1"        val objectMapper = jacksonObjectMapper()    }}